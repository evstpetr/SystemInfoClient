package ru.pes.systeminfoclient.view;

import java.io.IOException;
import javax.swing.SwingUtilities;
import ru.pes.systeminfoclient.utils.ServerConnector;
import ru.pes.systeminfoclient.utils.SoftInformationUtil;
import ru.pes.systeminfoclient.utils.SystemInformationUtil;


public class SysInfoFrame extends javax.swing.JFrame {

    private final SystemInformationUtil SI;
    private final SoftInformationUtil SOFT;
    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(SysInfoFrame.class);
    
    public SysInfoFrame(SystemInformationUtil si) {
        this.SI = si;
        if (SI.getArch().equals("x86")) {
            this.SOFT = new SoftInformationUtil("");
        } else {
            this.SOFT = new SoftInformationUtil(" (x86)");
        }
        initComponents();
        setLocationRelativeTo(null);
        taInfo.append("OS Info:"
                    + "\nOS name: " + si.getOsName()
                    + "\nArch: " + si.getArch());
        taInfo.append("\n----------------------------\n");
        taInfo.append("MotherBoard Info:"
                    + "\nMB name: " + si.getMotherBoardName()
                    + "\nMB vendor: " + si.getMotherBoardVendor());
        taInfo.append("\n----------------------------\n");
        taInfo.append("CPU Info:"
                    + "\nVendor: " + si.getCpuVendor()
                    + "\nModel: " + si.getCpuModel()
                    + "\nCores: " + si.getCpuCores()
                    + "\nFrequency: " + si.getCpuMhz());
        taInfo.append("\n----------------------------\n");
        taInfo.append("HardDrive Info:");
        si.getHDDs().stream().forEach((hdd) -> {
            taInfo.append("\n" + hdd);
        });
        taInfo.append("\n----------------------------\n");
        taInfo.append("RAM Info:"
                    + "\n" + si.getRam() + " MB");
        taInfo.append("\n----------------------------\n");
        taInfo.append("Net Info: "
                    + "\nIP addr: " + si.getIpAddr()
                    + "\nMAC addr: " + si.getMacAddr()
                    + "\nName :" + si.getPcName());
        taInfo.append("\n----------------------------\n");
        taInfo.append("L&D Info:"
                    + "\nLocation: " + si.getLOCATION()
                    + "\nDepartment: " + si.getDEPARTMENT());
        taInfo.append("\n----------------------------\n");
        taInfo.append("Inventoty Info:"
                    + "\nNumber: " + si.getInventoryNumber());
        taInfo.append("\n----------------------------\n");
        taInfo.append("\nSoftInfo writen.");
        taInfo.append("\n----------------------------\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taInfo = new javax.swing.JTextArea();
        btnDBSave = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Информация о системе");
        setResizable(false);

        taInfo.setEditable(false);
        taInfo.setColumns(20);
        taInfo.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        taInfo.setRows(5);
        jScrollPane1.setViewportView(taInfo);

        btnDBSave.setText("Сохранить в БД");
        btnDBSave.setToolTipText("Сохранить информацию о компьютере в БД.");
        btnDBSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDBSaveActionPerformed(evt);
            }
        });

        btnSave.setText("Сохранить");
        btnSave.setToolTipText("Сохранить копию информации о компьютере локально.");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDBSave, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDBSave))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDBSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBSaveActionPerformed
        SwingUtilities.invokeLater(new ServerConnector(SI, SOFT, taInfo));
    }//GEN-LAST:event_btnDBSaveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            SI.saveToFile();
            SOFT.saveToFile();
            taInfo.append("\nИнформация сохранена в файлы pc.dat, soft.dat.");
        } catch (IOException ex) {
            logger.error("Can't save files", ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDBSave;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taInfo;
    // End of variables declaration//GEN-END:variables
}
